networks:
  public:
  internal:
services:
  db:
    image: postgres:15.1-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - internal
  user-service:
    image: user-service
    build:
      context: ./user_service/
      dockerfile: Dockerfile
    init: true
    volumes:
      - ./user_service/:/usr/src/app/
      - static_volume:/usr/src/app/static
    ports:
      - "8000:8000"
    depends_on:
      - db
      - rabbitmq
    env_file:
      - .env
    networks:
      - internal
  notification-service:
    image: notification-service
    restart: always
    build:
      context: ./notification_service/
      dockerfile: Dockerfile
    init: true
    volumes:
      - ./notification_service/:/usr/src/app
      - static_volume:/usr/src/app/static
    command: python manage.py start_email_worker
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq: 
        condition: service_started
    env_file:
      - .env
    networks:
      - internal
  training-service:
    image: training-service
    restart: always
    build:
      context: ./training_service/
      dockerfile: Dockerfile
    init: true
    volumes:
      - ./training_service/:/usr/src/app/
      - static_volume:/usr/src/app/static
    ports:
      - "8002:8000"
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - internal
  celery:
    image: notification-service
    build:
      context: ./notification_service/
      dockerfile: Dockerfile
    command: celery -A notification_service worker -l INFO
    env_file:
      - .env
    depends_on:
      rabbitmq: 
        condition: service_started
      notification-service: 
        condition: service_started
    networks:
      - internal
  rabbitmq:
    image: rabbitmq:4.0.7-management-alpine
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_VHOST="/"
      - RABBITMQ_DEFAULT_USER=myuser
      - RABBITMQ_DEFAULT_PASS=Jojojo123
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - internal
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/usr/share/nginx/html/static
      - frontend_build_volume:/usr/share/nginx/html/frontend
    ports:
      - "80:80"
    depends_on:
      - user-service
      - training-service
      - frontend
    networks:
      - internal
      - public
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true
    networks:
      - internal
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - internal
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    networks:
      - internal
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"
    env_file:
      - .env
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana
    networks:
      - internal
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_build_volume:/var/www/frontend
volumes:
  postgres_data:
  rabbitmq_data:
  grafanadata:
  prometheusdata:
  static_volume:
  frontend_build_volume: